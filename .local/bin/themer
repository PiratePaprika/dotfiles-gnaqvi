#!/bin/bash

DOTFILES_DIR="$HOME/.dotfiles"
BASE16_DIR="$HOME/.config/base16"
TEMPLATES_DIR="$BASE16_DIR/templates"
COLORS_DIR="$BASE16_DIR/colors"
WALLPAPER_DIR="$HOME/Pictures/Wallpapers"
SHARED_DIR="$HOME/.local/share/themer"

CONFIG_FILE="$BASE16_DIR/config.json"
GENERATED_THEME="$SHARED_DIR/theme.json"

ALPHA_COLORS_TMPL_FILE='/tmp/alpha_colors_tmpl.json'
ALPHA_COLORS_TMPL='
{
	"alphas": {
		"00": "#{{opacity.hex}}{{colors.base.00}}",
		"01": "#{{opacity.hex}}{{colors.base.01}}",
		"02": "#{{opacity.hex}}{{colors.base.02}}",
		"03": "#{{opacity.hex}}{{colors.base.03}}",
		"04": "#{{opacity.hex}}{{colors.base.04}}",
		"05": "#{{opacity.hex}}{{colors.base.05}}",
		"06": "#{{opacity.hex}}{{colors.base.06}}",
		"07": "#{{opacity.hex}}{{colors.base.07}}",
		"08": "#{{opacity.hex}}{{colors.base.08}}",
		"09": "#{{opacity.hex}}{{colors.base.09}}",
		"0A": "#{{opacity.hex}}{{colors.base.0A}}",
		"0B": "#{{opacity.hex}}{{colors.base.0B}}",
		"0C": "#{{opacity.hex}}{{colors.base.0C}}",
		"0D": "#{{opacity.hex}}{{colors.base.0D}}",
		"0E": "#{{opacity.hex}}{{colors.base.0E}}",
		"0F": "#{{opacity.hex}}{{colors.base.0F}}",
		"ignore": "#{{opacity.hex}}{{colors.base.0B}}",
		"normal": "#{{opacity.hex}}{{colors.base.0B}}",
		"warn": "#{{opacity.hex}}{{colors.base.0A}}",
		"alert": "#{{opacity.hex}}{{colors.base.08}}"
	}
}
'

function stdin_view_render() {
	echo "$(echo "$1" | mustache - $2)"
}

function file_view_render() {
	echo "$(mustache $1 $2)"
}

function render() {
	local TEMPLATE=$1
	local TEMPLATE_ABS=$(realpath "$TEMPLATES_DIR/$TEMPLATE")
	test -f $TEMPLATE_ABS || { echo 'Template does not exist.' >&2; exit 1; }

	local DIR=$(dirname $1) #.config/polybar
	local FILE_NAME=$(basename $1) #config

	local CONFIG_DIR="$DOTFILES_DIR/$DIR" #~/.dotfiles/.config
	local CONFIG_FILE=$(echo "$DOTFILES_DIR/$DIR/${FILE_NAME%.*}")

	mkdir -p $CONFIG_DIR
	file_view_render $GENERATED_THEME $TEMPLATE_ABS > $CONFIG_FILE
}

function render_all() {
	local TEMPLATE_ARR=()
	readarray -t TEMPLATE_ARR < <(find $TEMPLATES_DIR -type f -name '*.template' -printf "%P\n")

	for TMPL in ${TEMPLATE_ARR[@]};
	do
		render $TMPL
	done
}

function generate_theme() {
	nvm use default > /dev/null
	[ -f "$GENERATED_THEME" ] || rm $GENERATED_THEME 2> /dev/null
	[ -d "$SHARED_DIR" ] || mkdir -p $SHARED_DIR 2> /de	local OUTPUT=""

	local OPACITY=$(jq -r '.opacity' $CONFIG_FILE)
	local OPACITY_INVERSE="$((100-${OPACITY}))"
	local OPACITY_HEX=$(printf '%x' "$((255*${OPACITY}/100))")
	local OPACITY_JSON="{ \"percentage\": \"$OPACITY\", \"inverse\": \"$OPACITY_INVERSE\", \"hex\": \"$OPACITY_HEX\" }"
	local OUTPUT=$(jq ".opacity = $OPACITY_JSON" $CONFIG_FILE)

	local BASE16_THEME=$(jq -r '.colors' $CONFIG_FILE)
	local COLORS_FILE="${COLORS_DIR}/${BASE16_THEME}.json"

	local HASHLESS_COLORS=$(sed 's/#//' $COLORS_FILE | jq ". += { \"opacity\": $OPACITY_JSON }" -)

	echo "$ALPHA_COLORS_TMPL" > $ALPHA_COLORS_TMPL_FILE
	local ALPHA_COLORS_JSON=$(stdin_view_render "$HASHLESS_COLORS" $ALPHA_COLORS_TMPL_FILE)
	rm $ALPHA_COLORS_TMPL_FILE

	local ALL_COLORS=$(jq ".colors += $ALPHA_COLORS_JSON" $COLORS_FILE)
	OUTPUT=$(echo $OUTPUT | jq ". += $ALL_COLORS")
	OUTPUT=$(echo $OUTPUT | jq ".colors += { \"scheme\": \"$BASE16_THEME\" }")

	echo "$OUTPUT" | jq 'del(.templates)' > $GENERATED_THEME
}

function set_wallpaper() {
	feh --no-fehbg --bg-fill "$WALLPAPER_DIR/$(jq -r '.wallpaper' $CONFIG_FILE)"
}

case $1 in
"--one")
	case $2 in
	"")
		echo 'Missing parameter.' >&2; exit 1
		;;
	*)
		test -h "$HOME/.nvm/nvm.sh" && . "$HOME/.nvm/nvm.sh" || exit -1

		render $2
		;;
	esac
	;;
"--all")
	test -h "$HOME/.nvm/nvm.sh" && . "$HOME/.nvm/nvm.sh" || exit -1

	generate_theme
	render_all
	set_wallpaper
	;;
*)
	echo 'Invalid parameter.' >&2; exit 1
	;;
esac
