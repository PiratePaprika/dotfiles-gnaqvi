#!/bin/bash

DOTFILES_DIR="$HOME/.dotfiles"
THEMER_DIR="$DOTFILES_DIR/.config/themer"
TEMPLATES_DIR="$THEMER_DIR/templates"
COLORS_DIR="$THEMER_DIR/colors"
WALLPAPER_DIR="$DOTFILES_DIR/Pictures/Wallpapers"
SHARED_DIR="$HOME/.local/share/themer"
CONFIG_FILE="$THEMER_DIR/config.json"
GENERATED_THEME="$SHARED_DIR/theme.json"

function render() {
	TEMPLATE="$1"
	TEMPLATE_ABS=$(realpath "$TEMPLATES_DIR/$TEMPLATE")
	test -f "$TEMPLATE_ABS" || { echo 'Template does not exist.' >&2; exit 1; }

	DIR=$(dirname "$1")
	FILE_NAME=$(basename "$1")

	CONFIG_DIR="$DOTFILES_DIR/$DIR"
	CONFIG_FILE="$DOTFILES_DIR/$DIR/${FILE_NAME%.*}"

	mkdir -p "$CONFIG_DIR"
	mustache "$GENERATED_THEME" "$TEMPLATE_ABS" > "$CONFIG_FILE"
}

function render_all() {
	TEMPLATE_ARR=()
	readarray -t TEMPLATE_ARR < <(find "$TEMPLATES_DIR" -type f -name '*.template' -printf "%P\n")

	for TMPL in "${TEMPLATE_ARR[@]}";
	do
		render "$TMPL"
	done
}

function generate_theme() {
	[ -f "$GENERATED_THEME" ] || rm "$GENERATED_THEME" 2> /dev/null
	[ -d "$SHARED_DIR" ] || mkdir -p "$SHARED_DIR" 2> /dev/null

	OUTPUT=$(jq -r '.' "$CONFIG_FILE")

	OPACITY_BAR=$(echo "$OUTPUT" | jq -r '.opacity.bar' -)
	OPACITY_WINDOW=$(echo "$OUTPUT" | jq -r '.opacity.window' -)
	OUTPUT=$(echo "$OUTPUT" | jq ".opacity = {
		\"bar\": {
			\"percentage\": $OPACITY_BAR,
			\"inverse\": $((100-OPACITY_BAR)),
			\"hex\": \"$(printf '%x' $((255*OPACITY_BAR/100)))\"
		},
		\"window\": {
			\"percentage\": $OPACITY_WINDOW,
			\"inverse\": $((100-OPACITY_WINDOW)),
			\"hex\": \"$(printf '%x' $((255*OPACITY_WINDOW/100)))\"
		}
	}")

	COLOR_PALETTE=$(echo "$OUTPUT" | jq -r '.colors.palette')
	ACCENT_COLOR=$(echo "$OUTPUT" | jq -r '.colors.accent')

	COLORS=$(jq -r '.' "$COLORS_DIR/$COLOR_PALETTE.json")
	ACCENT_NORMAL=$(echo "$COLORS" | jq -r ".normal.${ACCENT_COLOR}")
	ACCENT_BRIGHT=$(echo "$COLORS" | jq -r ".bright.${ACCENT_COLOR}")
	ACCENT_DIM=$(echo "$COLORS" | jq -r ".dim.${ACCENT_COLOR}")

	OUTPUT=$(echo "$OUTPUT" | jq ".colors = $COLORS")
	OUTPUT=$(echo "$OUTPUT" | jq ".colors += {
		 \"accent\": {
			\"normal\": \"$ACCENT_NORMAL\",
		 	\"bright\": \"$ACCENT_BRIGHT\",
		 	\"dim\": \"$ACCENT_DIM\"
		}
	}")

	echo "$OUTPUT" > "$GENERATED_THEME"
}

function set_wallpaper() {
	feh --no-fehbg --bg-fill "$WALLPAPER_DIR/$(jq -r '.wallpaper' "$CONFIG_FILE")"
}

case $1 in
"--generate-theme")
	generate_theme
	;;
"--write-one")
	case $2 in
	"")
		echo 'Missing parameter.' >&2; exit 1
		;;
	*)
		test -h "$HOME/.nvm/nvm.sh" && source "$HOME/.nvm/nvm.sh" || exit 1

		render "$2"
		;;
	esac
	;;
"--write-all")
	test -h "$HOME/.nvm/nvm.sh" && source "$HOME/.nvm/nvm.sh" || exit 1
	render_all
	;;
"--wallpaper")
    set_wallpaper
	;;
*)
	echo 'Invalid parameter.' >&2; exit 1
	;;
esac
