#!/bin/bash

DOTFILES_DIR="$HOME/.dotfiles"
BASE16_DIR="$HOME/.config/base16"
TEMPLATES_DIR="$BASE16_DIR/templates"
COLORS_DIR="$BASE16_DIR/colors"
WALLPAPER_DIR="$HOME/Pictures/Wallpapers"
SHARED_DIR="$HOME/.local/share/themer"
CONFIG_FILE="$BASE16_DIR/config.json"
GENERATED_THEME="$SHARED_DIR/theme.json"

COLORS_TEMPLATE='{
    "base": {
        "00": "#{{ 00 }}",
        "01": "#{{ 01 }}",
        "02": "#{{ 02 }}",
        "03": "#{{ 03 }}",
        "04": "#{{ 04 }}",
        "05": "#{{ 05 }}",
        "06": "#{{ 06 }}",
        "07": "#{{ 07 }}",
        "08": "#{{ 08 }}",
        "09": "#{{ 09 }}",
        "0A": "#{{ 0A }}",
        "0B": "#{{ 0B }}",
        "0C": "#{{ 0C }}",
        "0D": "#{{ 0D }}",
        "0E": "#{{ 0E }}",
        "0F": "#{{ 0F }}"
    },
    "normal": {
        "black": "#{{ 00 }}",
        "red": "#{{ 08 }}",
        "green": "#{{ 0B }}",
        "yellow": "#{{ 0A }}",
        "blue": "#{{ 0D }}",
        "magenta": "#{{ 0E }}",
        "cyan": "#{{ 0C }}",
        "white": "#{{ 05 }}"
    },
    "bright": {
        "black": "#{{ 03 }}",
        "red": "#{{ 08 }}",
        "green": "#{{ 0B }}",
        "yellow": "#{{ 0A }}",
        "blue": "#{{ 0D }}",
        "magenta": "#{{ 0E }}",
        "cyan": "#{{ 0C }}",
        "white": "#{{ 07 }}"
    },
    "hashless": {
        "00": "{{ 00 }}",
        "01": "{{ 01 }}",
        "02": "{{ 02 }}",
        "03": "{{ 03 }}",
        "04": "{{ 04 }}",
        "05": "{{ 05 }}",
        "06": "{{ 06 }}",
        "07": "{{ 07 }}",
        "08": "{{ 08 }}",
        "09": "{{ 09 }}",
        "0A": "{{ 0A }}",
        "0B": "{{ 0B }}",
        "0C": "{{ 0C }}",
        "0D": "{{ 0D }}",
        "0E": "{{ 0E }}",
        "0F": "{{ 0F }}",
		"black": "{{ 03 }}",
        "red": "{{ 08 }}",
        "green": "{{ 0B }}",
        "yellow": "{{ 0A }}",
        "blue": "{{ 0D }}",
        "magenta": "{{ 0E }}",
        "cyan": "{{ 0C }}",
        "white": "{{ 07 }}"
    }
}
'

function render() {
	local TEMPLATE=$1
	local TEMPLATE_ABS=$(realpath "$TEMPLATES_DIR/$TEMPLATE")
	test -f $TEMPLATE_ABS || { echo 'Template does not exist.' >&2; exit 1; }

	local DIR=$(dirname $1) #.config/polybar
	local FILE_NAME=$(basename $1) #config

	local CONFIG_DIR="$DOTFILES_DIR/$DIR" #~/.dotfiles/.config
	local CONFIG_FILE=$(echo "$DOTFILES_DIR/$DIR/${FILE_NAME%.*}")

	mkdir -p $CONFIG_DIR
	mustache $GENERATED_THEME $TEMPLATE_ABS > $CONFIG_FILE
}

function render_all() {
	local TEMPLATE_ARR=()
	readarray -t TEMPLATE_ARR < <(find $TEMPLATES_DIR -type f -name '*.template' -printf "%P\n")

	for TMPL in ${TEMPLATE_ARR[@]};
	do
		render $TMPL
	done
}

function generate_theme() {
	[ -f "$GENERATED_THEME" ] || rm $GENERATED_THEME 2> /dev/null
	[ -d "$SHARED_DIR" ] || mkdir -p $SHARED_DIR 2> /dev/null

	local OUTPUT=$(jq -r '.' $CONFIG_FILE)

	local OPACITY=$(echo $OUTPUT | jq -r '.opacity' -)
	local OPACITY_INVERSE="$((100-${OPACITY}))"
	local OPACITY_HEX=$(printf '%x' "$((255*${OPACITY}/100))")
	OUTPUT=$(echo $OUTPUT | jq ".opacity = { \"percentage\": $OPACITY, \"inverse\": $OPACITY_INVERSE, \"hex\": \"$OPACITY_HEX\" }")

	local COLOR_SCHEME=$(echo $OUTPUT | jq -r '.colors')
	local COLORS_VIEW=$(cat $COLORS_DIR/$COLOR_SCHEME.json)
	COLORS_VIEW=$(echo $COLORS_VIEW | jq ". += { \"alpha\": \"$OPACITY_HEX\" }")
	local ALL_COLORS=$(mustache <(echo "$COLORS_VIEW") <(echo $COLORS_TEMPLATE))
	OUTPUT=$(echo $OUTPUT | jq ".colors = $ALL_COLORS")
	OUTPUT=$(echo $OUTPUT | jq ".colors += { \"scheme\": \"$COLOR_SCHEME\" }")

	echo "$OUTPUT" > $GENERATED_THEME
}

function set_wallpaper() {
	feh --no-fehbg --bg-fill "$WALLPAPER_DIR/$(jq -r '.wallpaper' $CONFIG_FILE)"
}

case $1 in
"--template")
	case $2 in
	"")
		echo 'Missing parameter.' >&2; exit 1
		;;
	*)
		test -h "$HOME/.nvm/nvm.sh" && . "$HOME/.nvm/nvm.sh" || exit -1

		render $2
		;;
	esac
	;;
"--set")
	test -h "$HOME/.nvm/nvm.sh" && . "$HOME/.nvm/nvm.sh" || exit -1

	generate_theme
	render_all
	;;
"--refresh")
	$HOME/.config/bspwm/bspwmrc
	$HOME/.config/picom/launch
    set_wallpaper
	;;
"--wall")
    set_wallpaper
	;;
*)
	echo 'Invalid parameter.' >&2; exit 1
	;;
esac
